// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        debug = true
        gradleVersion = '3.2.1'
        minSdkVersion = 14
        targetSdkVersion = 28
        compileSdkVersion = 28
        buildToolsVersion = '28.0.3'
        versionCode = 1
        versionName = '1.0'
        applicationId = 'com.tobenull.multiflavorsdk'
        supportVersion = '28.0.3'
        espressoVersion = '2.2.2'
        buildTime = "${new Date().format("yyyyMMdd_HHmmss.SSS")}"

        SDKProperties = [
                [product: 'alibaba',  packageName: 'com.alibaba.demo', type: 'jar'],
                [product: 'baidu',    packageName: 'com.baidu.demo',   type: 'aarjar'],
                [product: 'tencent',  packageName: 'com.tencent.demo', type: 'aar'],
//                [product: 'iqiyi',    packageName: 'com.iqiyi.demo',   type: 'aar'],
        ]

        repo = [
                'http://maven.aliyun.com/nexus/content/groups/public',
                'http://maven.oschina.net/content/groups/public',
        ]
    }
    repositories {
        rootProject.ext.repo.each { repourl ->
            maven { url repourl }
        }
        jcenter()
        google()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:${rootProject.ext.gradleVersion}"
    }
}

allprojects {
    repositories {
        rootProject.ext.repo.each { repourl ->
            maven { url repourl }
        }
        jcenter()
        google()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task createJar(type: Jar) {
    from zipTree('sdk/build/intermediates/packaged-classes/baidu/release/classes.jar')
    into('assets') {
        from fileTree(dir: 'sdk/build/intermediates/library_assets/baiduRelease/packageBaiduReleaseAssets/out')
    }
    baseName = "SDK-${rootProject.ext.buildTime}-release"
    destinationDir = file('sdk/build/outputs/aar')
}

task zipSo(type: Zip) {
    from('sdk/build/intermediates/jniLibs/baidu/release')
    baseName = "SDK-${rootProject.ext.buildTime}-so"
    destinationDir = file('sdk/build/outputs/aar')
}

task main() {

}

createJar.dependsOn ':sdk:build'
zipSo.dependsOn createJar
main.dependsOn zipSo